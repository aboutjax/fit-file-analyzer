import Head from "next/head";
import { motion } from "framer-motion";
import ViewSwitch from "../components/viewSwitch";
import React, { useState } from "react";
import { FileUploader } from "react-drag-drop-files";
var FitParser = require("fit-file-parser").default;
const fileTypes = ["FIT"];
import ChartOverlayed from "../components/chartOverlayed";
import ChartStacked from "../components/chartStacked";

export default function Home() {
  const [data, setData] = React.useState(null);

  const handleChange = (data, file) => {
    setData({ fileName: file.name, data: data });
    console.log(data);
  };

  const startOver = () => {
    setData(null);
  };

  const variants = {
    hidden: { opacity: 0, y: 24 },
    show: { opacity: 1, y: 0 },
  };

  return (
    <div className="min-h-full flex flex-col justify-start items-center text-white p-6 bg-gray-900">
      <Head>
        <title>Fit File Analyzer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <motion.div
        variants={variants}
        initial="hidden"
        animate="show"
        className="mb-4 text-left flex items-start w-full flex-col sm:flex-row"
      >
        {!data ? (
          <div className="flex flex-col py-6">
            <h1 className="text-5xl mb-1 font-bold tracking-tight w-full">
              Fit File Viewer
            </h1>
            <p className="text-xl font-regular text-white w-full mb-4">
              Turn FIT files into beautiful charts.
            </p>
            <p className="text-md font-regular text-cyan-700 w-full p-2 bg-cyan-100 px-3 border border-cyan-200 rounded">
              Don&apos;t have FIT files? Try one of these:{" "}
              <a className="underline" href="./fit/indoor_cycling.fit" download>
                indoor_cycling.fit
              </a>
              ,{" "}
              <a
                className="underline"
                href="./fit/outdoor_cycling.fit"
                download
              >
                outdoor_cycling.fit
              </a>
            </p>
            <div></div>
          </div>
        ) : (
          <div className="flex flex-col w-full">
            <h1 className="text-xl w-full font-semibold w-full">
              {data?.fileName}
            </h1>
            <h1 className="text-sm font-regular text-white w-full text-gray-400">
              {new Intl.DateTimeFormat("en-us", {
                timeStyle: "long",
                dateStyle: "short",
              }).format(data?.data?.activity?.timestamp)}
            </h1>
          </div>
        )}
      </motion.div>

      {data ? (
        <DroppedFile
          data={data.data}
          name={data.fileName}
          startOver={startOver}
        />
      ) : (
        <DragDrop onChange={handleChange} />
      )}
      {/* {data && <ChartWrapper data={data.data} />} */}
    </div>
  );
}

function DragDrop({ onChange }) {
  const [fileOrFiles, setFile] = useState(null);
  const [isDragOver, setIsDragOver] = React.useState(false);
  const handleDragStateChange = (ev) => {
    setIsDragOver(ev);
  };
  const handleChange = (file) => {
    setFile(file);

    const reader = new FileReader();

    reader.readAsArrayBuffer(file);
    reader.onload = (e) => {
      var fitParser = new FitParser({
        force: true,
        speedUnit: "km/h",
        lengthUnit: "km",
        temperatureUnit: "kelvin",
        elapsedRecordField: true,
        mode: "both",
      });

      // Parse your file
      fitParser.parse(e.target.result, function (error, data) {
        // Handle result of parse method
        if (error) {
          console.log(error);
        } else {
          onChange(data, file);
        }
      });
    };
  };
  return (
    <FileUploader
      handleChange={handleChange}
      classes="h-full w-full flex-1"
      name="file"
      types={fileTypes}
      label={false}
      fileOrFiles={fileOrFiles}
      hoverTitle={false}
      multiple={false}
      onDraggingStateChange={handleDragStateChange}
    >
      <DropZone />
    </FileUploader>
  );
}

function DropZone({ isDragOver }) {
  return (
    <div
      className={`bgroup cursor-pointer text-white flex flex-col items-center justify-center p-12 border-dashed border-2 border-slate-300 rounded-md border h-full absolute w-full border-opacity-50`}
    >
      {/* <div className={` mb-3  opacity-50 `}>
        <Document />
      </div> */}
      <h1 className={`text-lg text-center`}>
        Drag and drop a FIT file, or <span className="underline">browse</span>
      </h1>
    </div>
  );
}

function DroppedFile({ name, startOver, data }) {
  const [stacked, setStacked] = React.useState(true);

  let handleViewChange = (value) => {
    setStacked(value === "stacked" ? true : false);
  };
  return (
    <div className="w-full flex flex-col items-center">
      <div className="w-full flex items-stretch">
        <button
          onClick={startOver}
          style={{ height: 42 }}
          className="shrink-0 mr-4 bg-gray-600 py-2 px-4 text-regular capitalize rounded text-white border border-gray-500"
        >
          Start over
        </button>
        <ViewSwitch onChange={handleViewChange} />
      </div>
      <div className="w-full">
        {stacked ? (
          <ChartStacked data={data} />
        ) : (
          <ChartOverlayed data={data} />
        )}
      </div>
    </div>
  );
}

function ChartWrapper({ data }) {
  const [stacked, setStacked] = React.useState(true);

  let handleViewChange = (value) => {
    setStacked(value === "stacked" ? true : false);
  };

  return (
    <div className="w-full">
      <button
        onClick={startOver}
        className="w-full sm:w-auto shrink-0 bg-gray-600 py-2 px-4 text-regular capitalize rounded text-white border border-gray-500"
      >
        Start over
      </button>
      <ViewSwitch onChange={handleViewChange} />
      {stacked ? <ChartStacked data={data} /> : <ChartOverlayed data={data} />}
    </div>
  );
}
