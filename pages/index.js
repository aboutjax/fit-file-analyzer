import Head from "next/head";
import { motion } from "framer-motion";
import ViewSwitch from "../components/viewSwitch";
import React, { useState } from "react";
import { FileUploader } from "react-drag-drop-files";
var FitParser = require("fit-file-parser").default;
const fileTypes = ["FIT"];
import Document from "../components/icons/document";
import ChartOverlayed from "../components/chartOverlayed";
import ChartStacked from "../components/chartStacked";
import simplify from "simplify-js";

export default function Home() {
  const [data, setData] = React.useState(null);

  const handleChange = (data, file) => {
    setData({ fileName: file.name, data: data });
    console.log(data);
  };

  const startOver = () => {
    setData(null);
  };

  return (
    <div className="min-h-full flex flex-col justify-start items-center p-6 bg-slate-100">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="p-2 mb-8 text-center">
        <h1 className="text-4xl font-bold mb-3 text-black tracking-tighter">
          Fit File Analyzer
        </h1>
        <h1 className="text-xl font-regular text-slate-500">
          Drop a FIT file to see some charts
        </h1>
      </div>

      {data ? (
        <DroppedFile
          data={data.data}
          name={data.fileName}
          startOver={startOver}
        />
      ) : (
        <DragDrop onChange={handleChange} />
      )}
      {/* {data && <ChartWrapper data={data.data} />} */}
    </div>
  );
}

function DragDrop({ onChange }) {
  const [fileOrFiles, setFile] = useState(null);
  const [isDragOver, setIsDragOver] = React.useState(false);
  const handleDragStateChange = (ev) => {
    setIsDragOver(ev);
  };
  const handleChange = (file) => {
    setFile(file);

    const reader = new FileReader();

    reader.readAsArrayBuffer(file);
    reader.onload = (e) => {
      var fitParser = new FitParser({
        force: true,
        speedUnit: "km/h",
        lengthUnit: "km",
        temperatureUnit: "kelvin",
        elapsedRecordField: true,
        mode: "both",
      });

      // Parse your file
      fitParser.parse(e.target.result, function (error, data) {
        // Handle result of parse method
        if (error) {
          console.log(error);
        } else {
          onChange(data, file);
        }
      });
    };
  };
  return (
    <FileUploader
      handleChange={handleChange}
      classes="h-full w-full flex-1"
      name="file"
      types={fileTypes}
      label={false}
      fileOrFiles={fileOrFiles}
      hoverTitle={false}
      multiple={false}
      onDraggingStateChange={handleDragStateChange}
    >
      <DropZone isDragOver={isDragOver} />
    </FileUploader>
  );
}

function DropZone({ isDragOver }) {
  return (
    <div
      className={`bg-white group cursor-pointer text-slate-800 flex flex-col items-center justify-center p-12 border-dashed border-2 border-slate-300 rounded-md border h-full absolute w-full ${
        isDragOver && `bg-slate-100`
      }`}
    >
      <div
        className={`text-slate-400 mb-3 group-hover:text-blue-500 opacity-50 group-hover:opacity-100`}
      >
        <Document />
      </div>
      <h1 className={`text-slate-800 text-md text-center`}>
        Upload or drag and drop a FIT file to start analyzing.
      </h1>
    </div>
  );
}

function DroppedFile({ name, startOver, data }) {
  const [stacked, setStacked] = React.useState(true);

  let handleViewChange = (value) => {
    setStacked(value === "stacked" ? true : false);
  };
  return (
    <div className="w-full">
      <div className="rounded-md flex items-center w-full justify-between mb-2">
        <div className="flex items-center shrink w-full overflow-hidden">
          <motion.div
            style={{ x: -10 }}
            className={`text-slate-400 group-hover:text-blue-500 `}
          >
            <Document />
          </motion.div>
          <motion.span
            style={{ x: -10 }}
            className="text-lg w-full font-medium truncate text-ellipsis"
          >
            {name}
          </motion.span>
        </div>

        <button
          onClick={startOver}
          className="shrink-0 py-2 px-4 text-regular capitalize rounded-full bg-slate-800 text-white border"
        >
          Start over
        </button>
      </div>
      <hr className="mb-4 border-slate-800" />
      <ViewSwitch onChange={handleViewChange} />

      {stacked ? <ChartStacked data={data} /> : <ChartOverlayed data={data} />}
    </div>
  );
}

function ChartWrapper({ data }) {
  const [stacked, setStacked] = React.useState(true);

  let handleViewChange = (value) => {
    setStacked(value === "stacked" ? true : false);
  };

  return (
    <div className="w-full">
      <ViewSwitch onChange={handleViewChange} />
      {stacked ? <ChartStacked data={data} /> : <ChartOverlayed data={data} />}
    </div>
  );
}
